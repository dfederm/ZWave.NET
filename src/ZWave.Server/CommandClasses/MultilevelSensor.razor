@using ZWave.CommandClasses

@inherits CommandClassComponentBase

<Error Message="@ErrorMessage" Exception="@ErrorException" />

@if (CommandClass != null)
{
    <table class="table table-striped">
        @if (CommandClass.SupportedSensorTypes != null)
        {
            <tbody>
                <tr>
                    <th scope="row">Supported Sensor Types</th>
                    <td>@(string.Join(", ", CommandClass.SupportedSensorTypes)))</td>
                </tr>
            </tbody>
        }

        @if (CommandClass.SupportedScales != null)
        {
            <tbody>
                <tr>
                    <th scope="rowgroup" colspan="2">Supported Scales</th>
                </tr>
                @foreach ((MultilevelSensorType sensorType, IReadOnlySet<MultilevelSensorScale>? scales) in CommandClass.SupportedScales)
                {
                    <tr>
                        <th scope="row">@sensorType</th>
                        <td>@(scales != null ? string.Join(", ", scales.Select(scale => $"{scale.Label} ({scale.Unit})")) : string.Empty)</td>
                    </tr>
                }
            </tbody>
        }

        @if (CommandClass.SensorValues != null)
        {
            <tbody>
                <tr>
                    <th scope="rowgroup" colspan="2">Sensor Values</th>
                </tr>
                @foreach ((MultilevelSensorType sensorType, MultilevelSensorState? state) in CommandClass.SensorValues)
                {
                    <tr>
                        <th scope="row">@sensorType</th>
                        <td>@(state.HasValue ? $"{state.Value.Value} {state.Value.Scale.Unit}" : string.Empty)</td>
                    </tr>
                }
            </tbody>
        }

        @if (CommandClass.IsCommandSupported(MultilevelSensorCommand.Get).GetValueOrDefault())
        {
            <tbody>
                <tr>
                    <th scope="rowgroup" colspan="2">Get</th>
                </tr>
                @if (CommandClass.Version >= 5)
                {
                    <tr>
                        <th scope="row">Sensor Type</th>
                        <td>
                            <select @bind="_getSensorType">
                                <option value=""></option>
                                @foreach (MultilevelSensorType sensorType in Enum.GetValues<MultilevelSensorType>())
                                {
                                    <option value="@sensorType">@sensorType</option>
                                }
                            </select>
                        </td>
                    </tr>
                    @if (_getSensorType.HasValue
                        && CommandClass.SupportedScales != null
                        && CommandClass.SupportedScales.TryGetValue(_getSensorType.Value, out IReadOnlySet<MultilevelSensorScale>? scales)
                        && scales != null)
                    {
                        <tr>
                            <th scope="row">Scale</th>
                            <td>
                                <select @bind="_getScale">
                                    @foreach (MultilevelSensorScale scale in scales)
                                    {
                                        <option value="@scale.Id">@scale.Label (@scale.Unit)</option>
                                    }
                                </select>
                            </td>
                        </tr>
                    }
                }
                <tr>
                    <td></td>
                    <td>
                        <button @onclick="GetAsync">Get</button>
                    </td>
                </tr>
            </tbody>
        }

        @if (CommandClass.IsCommandSupported(MultilevelSensorCommand.SupportedSensorGet).GetValueOrDefault())
        {
            <tbody>
                <tr>
                    <th scope="rowgroup" colspan="2">Get Supported Sensor Types</th>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <button @onclick="GetSupportedSensorTypesAsync">Get Supported Sensor Types</button>
                    </td>
                </tr>
            </tbody>
        }

        @if (CommandClass.IsCommandSupported(MultilevelSensorCommand.SupportedScaleGet).GetValueOrDefault())
        {
            <tbody>
                <tr>
                    <th scope="rowgroup" colspan="2">Get Supported Scales</th>
                </tr>
                <tr>
                    <th scope="row">SensorType</th>
                    <td>
                        <select @bind="_getSupportedScalesSensorType">
                            @foreach (MultilevelSensorType sensorType in Enum.GetValues<MultilevelSensorType>())
                            {
                                <option value="@sensorType">@sensorType</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        <button @onclick="GetSupportedScalesAsync">Get Supported Scales</button>
                    </td>
                </tr>
            </tbody>
        }
    </table>
}

@code {
    // Get
    private MultilevelSensorType? _getSensorType;
    private MultilevelSensorScale? _getScale;

    // GetSupportedScales
    private MultilevelSensorType _getSupportedScalesSensorType;

    [Parameter]
    public MultilevelSensorCommandClass? CommandClass { get; set; }

    private async Task GetAsync()
        => await RunSafelyAsync(
            async () => await CommandClass!.GetAsync(_getSensorType, _getScale, CancellationToken.None),
            nameof(CommandClass.GetAsync));

    private async Task GetSupportedSensorTypesAsync()
        => await RunSafelyAsync(
            async () => await CommandClass!.GetSupportedSensorsAsync(CancellationToken.None),
            nameof(CommandClass.GetSupportedSensorsAsync));

    private async Task GetSupportedScalesAsync()
        => await RunSafelyAsync(
            async () => await CommandClass!.GetSupportedScalesAsync(_getSupportedScalesSensorType, CancellationToken.None),
            nameof(CommandClass.GetSupportedScalesAsync));
}
